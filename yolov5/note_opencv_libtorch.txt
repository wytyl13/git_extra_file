好了接着上个视频


上个视频讲解了cmake+mingw编译一个传统的c++项目
今天我们讲解下libtorch-yolov中需要使用到的几个第三方库
主要包含opencv、libtorch
我们首先安装这两个库，opencv使用MSVC编译，和上个视频中提到的mingw不同的是
这个是专用于windows的，而且在windows上编译libtorch只能使用msvc
所以我们这次使用windows上的MSVC编译安装opencv。
然后libtorch我们直接下载对应版本的编译好的二进制就行。
我们首先把这两个第三方库装上


opencv  
    首先下载源码：包含两个源码，一个是opencv官方确定的版本、一个是其他没有
    被官方确定的库，因为他们的运行还不稳定，所以单独放在了一个缓冲源码中
    这两个源码都可以在github上下载
    前两个就是这两个源码，注意下载的时候要保证两个源码的版本一致
    不一致会导致不兼容，因为这两个源码在每个版本都会更新迭代，每个版本
    对应的头文件都不一样，不一致的版本一定会存在找不到头文件的问题，因为
    每个版本都会对opencv_contrib源码中的部分工具官方化。所以是这个问题


    随便选择一个版本，就选4.5.0吧，我没有安装过这个版本，试试
    然后下载对应版本的contrib
    这两个文件都是大项目，下载和安装比较慢，我在下载和安装进度条的时候暂停
    视频。
    稍后下载好了以后我们还是使用cmake管理工具编译安装，但是这次使用的编译器
    是MSVC，和mingw的操作基本一致。
    我们这次使用cmake-gui这个工具来操作下吧。直接运行即可，这个是
    cmake的可视化操作工具。
    如果之前安装过，上来先delete cache一下。

    这个可视化工具和cmake命令行的一样，你需要指定源码的地址和需要安装
    在哪个文件的地址，也就是build的地址，我们上个视频使用cmake -G "Mingw Makefiles" ..
    会自动进行编译，这个道理也一样，你先制定好源码和需要安装的路径，然后它再给你执行这个命令去将cmakelist文件
    编译为makefile文件，然后你再在build目录下make即可。

    制定好这两个路径以后，我们可以点击configure，其实就是cmake -G "Mingw Makefiles" ..
    首先检查安装环境，检查头文件等信息是否存在，然后generate，其实就是检查完毕
    以后生成对应的makefile文件。这两部操作相当于cmake -G "Mingw Makefiles" ..这一个
    命令的结果。
        我们可以先在昨天的项目中看下。我打开一个项目吧，昨天的项目传导仓库里面了
        我在本地删除了
        [cmake] -- Configuring done
        [cmake] -- Generating done
        [cmake] -- Build files have been written to: D:/development_code_2023-03-03/vscode/opencv_micro/build
        是不是和我们上次的这个一模一样，其实cmake-gui安装就是这样的。
        它的目的就是生成对应的makefile文件，生成以后我们才可以使用编译器进行编译
        mingw对应的编译makefile的命令是mingw32-make.exe，直接使用它编译项目
        然后编译完了如果还需要安装就make install安装即可

        MSVC对应的编译命令是nmake，对应的不会生成makefile而是解决方案
        使用MSVC自带的MSBUILD工具去编译对应的解决方案即可。
        道理和mingw是一样的。我们稍后再看。

        我们现在可以试着编译一下我打开的这个项目。
            我刚才已经操作过cmake -G "Mingw Makefiles" ..了，意味着makefile文件已经生成
            这是管理文件生成的makefile
            这是某一个微服务生成的makefile
            然后我们只需要在build目录下执行mingw32-make.exe即可。
            我这个命令好像不能执行，我操作一下

            我想起来了，这个命令我删除掉了
            在powershell终端配置文件起的别名，后面的会覆盖前面的
            这个其实就是mingw32-make对makefile的解析编译
            编译完了以后自己的项目就可以生成可执行文件了。如果是
            商业项目，还支持安装。
            安装就是make install
            安装一般分为release版本和debug版本，前者是发行版本，后者是测试版本
            其实就是后者在源码中定义的容错代码较多，所以后者较前者输出的bug信息多
            或者说前者根本不会支持在代码编译或者运行的时候调试。
            所以我们需要有这样一个前馈知识，我们安装的第三方库都有一个release版本和debug
            版本，所以如果想要在同一个项目中使用不同的第三方库，我们需要统一
            这些库的版本，都用release或者都用debug。所以我们后续的测试都要基于同样的版本
            我们可以选择release先测试下。大家后续使用debug进行测试。
            稍后继续。

            OK已经下载完毕，我们继续。貌似下载失败了。我再下载一次
            马上下载完毕，我们现在还需要下载一个MSVC的编译器。可以去官网下载
            下载这个工具，和之前的mingw一样。这两个下载的东西至少2个G以上
            MSVC至少1个G以上，这个和mingw的界面其实一样了。然后进去了选择一个最小安装即可
            这里我就不下载了。这个下载路径默认即可。一般在c盘下
            C:\Program Files (x86)\Microsoft Visual Studio
            在这个目录下，是visual studio集成开发环境下的一个编译器
            msvc
            最新版的时2022
            C:\Program Files (x86)\Microsoft Visual Studio\2022\BuildTools\VC\Tools\MSVC\14.37.32822\bin\Hostx64\x64
            对应的是64位的系统
            nmake，这个是我们要使用的nmake，他其实不是编译命令。我不清楚，他应该是相当于
            mingw32-cmake.exe把使用它可以执行makefile文件。


            cl.exe这个是编译命令，相当于g++，我们就使用这个去编译c++源代码

            然后cmake会结合MSVC编译器将源码编译为解决方案，这个解决方案不是makefile
            文件，而是windows自己的文件，我们需要使用MSBUILD.exe去执行这个解决方案
            也就是使用它去解析解决方案，然后生成一系列的编译命令，去批量编译项目。
            然后我们去找下这个msbuild.exe在哪里
            C:\Program Files (x86)\Microsoft Visual Studio\2022\BuildTools\MSBuild\Current\Bin\msbuild.exe
            这个是对解决方案去执行的命令，一会我们要用到。我们可以把这两个bin目录添加为环境变量。
            我们可以定义一个MSVC编译器的环境变量，其实这个不用也可以，因为我们只需要这两个
            可执行文件。你可以在终端的配置文件中配置，也可以加入环境变量
            但是我感觉C:\Program Files (x86)这个目录下的所有文件都不需要加环境变量
            大家可以试下。然后我们开始编译。使用cmake-gui

            我们想要将项目编译到那个文件夹，我们就新建一个文件夹即可。一般我们
            都是在项目下放一个源码文件夹，一个编译好的build文件夹。我们来创建下build文件夹
            我们现在只需要将opencv看做我们自己的项目去编译
            现在opencv文件夹是我们的项目
            进去了有一个源码文件夹，源码包含opencv官方和contrib
            下来我们新建一个build文件夹去放编译好的项目
            OK 进入cmake-gui
            这个路径是opencv的源码文件夹。不包含contrib
            这个是你需要编译的目标路径，一会编译生成的解决方案都会存储到这个文件夹中
            我们要进入到这个文件夹对解决方案执行编译命令。

            选择编译器，mingw或者MSVC   x64是64位操作系统
            finish后就开始检验安装环境了。稍微等待下，注意这里需要下载很多的依赖工具
            因为opencv使用到了很多第三方的工具，所以需要联网安装下载，
            这是个警告，提示没有找到对应的python版本。一般应该解决，但是我不想去降低我的
            python版本，所以我们选择忽略。

            configure+generate其实就相当于cmake -G "windows编译" ..
            这个结果会在build文件夹下生成对应的解决方案，mingw编译器是makefile文件
            然后我们可以去使用各自编译器对应的指令去解析对应的解决方案，解析好的解决方案就是一个个
            使用对应编译器的编译指令构成的批量的编译代码，然后会自动执行对应的编译代码
            我们就实现了使用cmake编译项目，然后安装的话其实就是对编译好的项目进行一个汇总生成
            这个在程序开发阶段其实不是特别的重要。

            大家看，他其实在检查头文件信息是否存在。因为后续的编译过程不能因为缺少这些文件而中断。
            所以这一步还是很必要的。不论是使用cmake-gui还是cmake指令去编译，第一步都是这样的
            只不过我们自己编写的项目的头文件比较少，这个过程很快而已。
            我先暂停一下等他检查完。
            检查完毕，现在有两个操作
                第一加入contrib源码
                    OPENCV_EXTRA_MODULES_PATH，这个是制定extra_model路径的
                    我发现之前那个路径错误了，我们更正一下
                    还等重来一次，稍等
                    D:/libtorch_yolo_tools/opencv/source/opencv_contrib/modules
                第二让opencv编译后生成一个统一的lib库
                    world，这个会生成一个统一的lib库
                这是第二次configuration，这会主要是下载contrib源码中包含的一些依赖
                注意如果没有打开科学上网，很多下载会失败。下载失败会直接导致
                configuration失败或者在后续的调用函数中失败。所以这块一定要尽量
                解决所有的错误，警告可以忽略。
                可以他去github上下载东西了
                稍等下。
                注意这里如果下载失败或者下载出现问题，会花费很长的时间
                所以如果有科学上网并且网络畅通的话是很快的。即使错误了也没事
                点击stop，然后重新configuration
                多试几次，一定在这块要把该下载的东西下载好。如果已经科学上网了
                且网络畅通就是下载不了的话。那可以把github的域名映射更换下，看是是不是域名
                映射的ip地址过期了。
                    看已经完成了，但是好像很多第三方的工具都没有下载成功，我们
                    继续下载下。重新configuration。多试几次，总有一次会畅通无阻的。

                    域名映射在这里更改，windows。code $HOSTS
                    140.82.113.3 github.com
                    前面是ip地址后面是对应的访问网址的域名。因为这种网址一般会存在多个ip
                    所以有的ip会有过期现象。但是一般不要更改这些。
                    还有一种解决办法就是去下载对应的文件然后存储到对应的目录下。
                    D:/libtorch_yolo_tools/opencv/source/opencv_contrib/modules/wechat_qrcode/CMakeLists.txt:26 (ocv_download)
                    看这个下载，是在cmakelist中定义的，一般会将其下载在D:/libtorch_yolo_tools/opencv/source/opencv_contrib/modules/wechat_qrcode/
                    这个目录下，我们直接将下载好的文件保存在对应目录即可，当你再次点击
                    configuration的时候，它会先查看是否已经存在该文件，如果不存在才会去仓库拉取。
                    还是报错，下载失败，我暂停下，多试几次。
                    好吧，我试了好多次，终于OK了，应该是网速的问题，而且这里面却是有好几个
                    文件是几十兆的，下载速度慢也正常。如果一直报错那就一直configuration就可以了
                    完了检查下有没有爆红的
                    OKgenerate
                    注意这块如果没有下载成功，是不会影响编译的。只能说你安装成功后再使用opencv的某些
                    函数的时候可能会失败，因为没有对应的依赖文件。OK build文件中的解决方案应该已经生成了，我们
                    去看下
                    ALL_BUILD.vcxproj 这个就是MSVC生成的解决方案，我们可以使用
                    msbuild.exe对其进行解析，它会自动将解决方案解析成编译命令，然后自动编译
                    没有添加msbuild的环境变量就使用绝对路径把
                    注意编译的时候应该是需要制定编译版本的，是要编译release还是debug
                    "C:\Program Files (x86)\Microsoft Visual Studio\2022\BuildTools\MSBuild\Current\Bin\Msbuild.exe" .\ALL_BUILD.vcxproj /p:Configuration="Release"
                    不知道这个对不对，姑且一试。我还是查下吧。不查了就这样吧
                    应该是我们没有调用msbuild命令成功，我们再试下
                    好吧，还是老实的添加环境变量吧。这里我使用我已经添加好的命令吧
                    不会的大家可以网上查下或者看下之前的视频，这个命令的路径大家已经知道了
                    msbuild .\ALL_BUILD.vcxproj /p:Configuration="Release"
                    编译release版本，注意如果在自己的项目中使用第三方库，第三方库是什么版本的，自己的项目也要编译
                    使用什么版本。当然msbuild支持生成debug和release两个版本
                    这个编译过程是很漫长的，一般得一个小时以上吧，待会再来

                    好的现在已经编译完成，我们试着install一下
                    是不是这个INSTALL.vcxproj
                    不对，我查下。最后这个/target参数是用来指定安装路劲的
                    我们使用默认的吧，install应该快点，我们等待一下

                    一会就会将opencv项目安装到install目录我们就可以在我们的项目中调用了
                    D:\libtorch_yolo_tools\opencv\build\install
                    然后我们先试着在我们的项目中使用下opencv

                    好，我们已经编写好了cmakelists文件，现在我们cmake一下这个文件
                    可以发现已经根据我们设置的opencv路径找到了对应的库文件和头文件
                    但是好像这个include路径打印为空，应该是有问题。如果include的路径没有
                    添加到编译参数中，编译会失败
                    我们看下是不是变量名称写错了，少一个S
                    OK，下面我们可以试着编译一下。先不用管vscode编辑器的报错
                    这个不影响编译。
                    编译显示无法打开头文件，但是我们已经在cmakelist中指定了该头文件路径
                    是不是没有对应的头文件？我们可以去找下。可以发现是有的，那么是什么问题呢？

                    我想应该是没有问题的，但是暂时不知道如何解决，我们可以试着给
                    vscode添加下编译器试试。但是这不一定可以解决
                    刚才的所有操作都会更改c_cpp_properties.json文件
                    这个文件是定义编译器，定义头文件的。
                    cl.exe这个是我们的编译器
                    "${workspaceFolder}/**"这个是添加的当前项目目录为头文件路径。我们可以继续
                    添加，将opencv的include路径添加到这里，那么vscode编辑器就不会
                    显示报错信息了。但是这个应该不会影响到编译。
                    我想是不是这其中有的头文件是在contrib源码中的，因为opencv的头文件包含在
                    两个源码中，一个是opencv一个是contrib，所以我们确定下，因为我们只添加了
                    opencv的includepath到cmakelist中，没有添加contrib的includepath
                    我们找下
                    现在应该不会报错了，编译是应该没有问题的，可能是我们的头文件写错了
                    不是opencv而是opencv2
                    先完成编译
                    看来确实我们只需要将cmakelist中的内容配置好就不会影响正常编译的
                    我们看下这个报错原因
                    是不是我们需要制定编译release版本，因为我们opencv安装的时release版本
                    OK，看来是这样的，我们执行下可执行文件。没有任何消息。。。。
                    哈哈，这就尴尬了，我看下应该是imshow或者imread函数执行错误了
                    但是没有显示任何消息，我们可以双击打开看提示什么。
                    我觉得应该是库文件没有找到的问题，因为imshow或者imread函数在调用的
                    时候肯定会调用opencv的库。

                    哈哈，还真是。那么怎么办呢我想想。
                    直接将该库文件移动到当前项目下肯定是可行的。但是那样做不合适
                    可以在cmakelist中指定吗？
                    
                    当调用 OpenCV 函数时出现找不到 DLL 文件的问题通常是因为系统无法找到所需的 OpenCV 动态链接库（DLL 文件）。以下是一些可能的解决方法：

                    添加 DLL 文件路径：确保你的项目可以访问到 OpenCV DLL 文件所在的路径。你可以将 OpenCV 的 DLL 文件夹路径添加到系统的环境变量中，或者在项目中设置正确的库路径。

                    拷贝 DLL 文件：将 OpenCV DLL 文件拷贝到你的项目的可执行文件所在的文件夹中。这样可以确保运行时能够找到所需的 DLL 文件。
                    好吧只有这两个适合我们了。

                    我可以将这个库随便添加到我链接的库的路径即可。
                    我先看下我链接库的路径都有哪些。链接库是直接给名称，不给路径，我先
                    找到world这个dll库的路径把
                    应该是这个，我只需要将他放在一个系统可以找到的地方就行了
                    或者像刚才回答的那样，将该目录添加为系统环境变量。大家都可以尝试下
                    我就不添加环境变量了，应该需要重启。我找找其他库
                    我把他放到windows目录下试试看行吗，因为我觉得windows他就可以代表
                    环境变量。测试ok可以、
                    那么opencv的安装就完成了。我们把刚才的vscode编辑器报错的问题处理下

                    D:/libtorch_yolo_tools/opencv/build/install/include
                    我们已经将该路径添加到vscode的includepath中了，那么只要该路径下存在的文件
                    我们都可以包含。包含头文件的时候可以省略掉我们已经包含的，可以c:\Users\80521\AppData\Local\Temp\SGPicFaceTpBq\4212\14581AB8.png
                    include之前的路径，即从opencv2开始都可以包含
                    哦，原来不是这个文件出错了，是这个文件中包含的头文件找不到了
                    我们快速解决下
                    这个limits应该是官方标准文件，那么我们是不是应该为官方标准头文件的
                    路径也添加到我们的项目中呢？找一下MSVC中的includepath
                    OK,现在查看下
                    编辑器已经可以找到全部的头文件了。。。。


                    好吧，现在我们讲完了opencv

                    下次我们开始libtorch的安装，并且搭建整个
                    libtorch-yolov5项目


    好了我们开始安装libtorch，libtorch直接安装二进制的。
    注意要下载和对应的pytorch版本一致的libtorch，为什么呢？
    因为我们一般是在pytorch上进行训练模型。然后只在libtorch上部署已经训练好的
    模型，即只在libtorch上实现模型的检测。所以我们不能像在pytorch上一样
    直接使用训练好的模型预测，因为libtorch不支持在pytorch上直接训练好的模型
    需要进行转换，具体转换方式有好几种，首先分类为opencv支持的格式、libtorch支持的
    格式，还有其他框架支持的格式，opencv支持onnx，libtorch支持pt和torchscript格式
    还有其他的，我说的可能不全，但是我们一般使用pytorch先去将训练好的pt权重文件
    转换为libtorch或者opencv可以直接使用的权重文件，具体转换方式也有很多种。
    后续再谈。以上说明了为什么libtorch要和pytroch的版本一致。
    注意，不需要和训练模型时候的torch版本一致，因为我们训练一般在云上，如果要求版本一致
    还是很难的，所以只需要转换模型的pytorch和libtorch的版本一致即可。
    下面我们来安装libtorch

    libtorch就是pytorch对c++的接口，直接在这里下载即可https://pytorch.org/
    https://download.pytorch.org/libtorch/cu117/libtorch-win-shared-with-deps-2.0.1%2Bcu117.zip
    Download here (Debug version):
    https://download.pytorch.org/libtorch/cu117/libtorch-win-shared-with-deps-debug-2.0.1%2Bcu117.zip
    注意release版本和debug版本
    我们选择release版本，和之前的opencv版本对应
    我们先看下我们本地机器上pytorch的版本，一会我们要使用它去转换模型
    1.13.1+cpu，找对应的libtorch版本。cpu也要一致。不能是GPU
    直接下载即可，我之前下载过，我就不浪费流量下载了，我直接解压
    二进制安装还是很简单的，和pip一样方便
    我们需要在我们的项目中引入libtorch
    

    可以发现系统自动找到了两个头文件路径我们一会可以把它添加到
    vscode的json文件中，以便于编辑器可以找到头文件不报错
    注意这个不影响编译

    好了我们可以直接引入libtorch到我们的项目了
    vscode找不到头文件，因为我们只给编译器定义了头文件，一会再解决vscode
    的头文件
    他又显示头文件不存在，我在编译器中已经添加了。排除下
    如果已经可以确定添加了头文件路径到编译器，那么只有两个可能
    第一：该头文件不存在
    第二：该头文件存在但是我们添加的路径不包含它

    那么解决问题，我们要先找到该头文件
    D:\libtorch_yolo_tools\libtorch\include\torch我们添加的头文件路径下不包含这个头文件
    OK vscode已经有了该头文件对应的地址了
    但是编译工具应该还没有指定。。。。我们先编译下
    OK我们给编译器制定下
    我们是漏掉在编译器中添加头文件和库文件路径了，现在应该没问题了
    我们调用的version不对
    这该死的GPT
    我们直接查看下cuda是否可用把。版本应该没问题
    这个编译命令太长了，我们可以使用makefile去简化它。
    0就是不可用，至此libtorch安装完毕。


    下面我们来运行下libtorch-yolov5项目试试
    从官网下载对应的项目源码，然后编译运行试下。


    我们把项目拉取到本地
    只有一个版本

    Export a trained yolov5 model:
    他在教我们如何转换一个pytorch模型到libtorch
    我们不按照它的步骤，我们之前已经有了足够的编译经验了。直接开干

    我们需要使用pytorch转换下模型。我们找一个yolov5项目转换下

    我们试着将这个yolov5m.pt权重文件转换为libtorch可用的
    转换脚本yolov5官方提供了
    这个参数是不是很熟悉
    --data是对应的数据集信息配置文件
    --weights是权重文件
    --incude是制定转换为什么类型的文件
    有onnx格式的，有torchscript格式的。前者是opencv的格式
    后者是libtorch可以使用的格式，具体转换方式是什么咱们以后有机会聊聊
    大家也可以自己去看下，这个include是一个列表，你可以指定转换多重格式

    下面我们转换下
    官方权重，数据集使用官方的
    先运行下试试
    yolov5m.torchscript.pt应该是这个。我们使用libtorch直接读取它

    现在我们打开libtorch-yolov5项目
    这些参数和项目结构我们是不是很熟悉了。
    我们直接将这个项目编译一下吧
    我操作了
    OK，大家可以体会到cmakelist的便利性了吧
    现在应该可以直接编译

    我们需要提供一个权重文件，我们看下主函数中哪里可以提供
    这个是官方的coco数据集配置文件，不用动他
    如果训练自己的数据集，改变他就行
    他是从终端获取参数的。我们直接编译吧
    如果编译通过就可以了
    刚才看到报错了
    又是找不到头文件
    我们装的是CPU版本，这个程序对GPU做了兼容
    所以我们注释掉GPU调用的头文件就行

    MSBuild编译时候的编译分析真的很多，怎么
    关闭它，大家知道嘛。向大家请教下。

    这个libtorch-yolov5项目和用户的交流方面少。只是构建了一个项目
    让模型可以跑起来。我们一会看下我之前编写的和用户交流的一个项目
    注意有参数其余的参数用默认的吧
    没有保存结果吗？OK结果还可以，这个是官方的yolov5m权重文件
    大家自己可以试试自己的权重文件。


    还是我带大家试下吧
    我选一个自己训练的模型试试
    这个字体还是没有python上面的好看，大家可以去下载个一样的字体
    last.pt这个是我自己训练的pt模型，现在我在这个项目中将它转换下
    注意转换的pytorch版本要和libtorch一样，训练的可以不一样

    好像没有打印图像，是不是没有识别出来？？？

    我们还账图像，应该是没有指定显示图像
    ok C++的yolov5项目还是很粗糙的，因为比较难，所以用它
    的比较少，pytorch的就比较好了


    我们看下我之前做的额项目
    这相当于一个和用户交互的界面，这个不是c++的强项，这个应该是
    前端页面干的工作。
    还是不错的，我一会把这个传到github上


    我们最后来解决一个问题，就是如何使用vscode一键编译运行项目
    这个需要使用到vscode的task.json文件
    其实使用makefile也可以做到，比如我们可以在cmakelist最后加上
    add_custom_command这个指令。这个指令可以运行一个脚本文件
    这个脚本文件可以是sh结尾也可以是bat结尾，也就是linux和windows对应的
    bash脚本文件
    我们可以在这个脚本文件中定义多个指令去编译+运行可执行文件
    我可以试着编译一下大家看下。
    这个
    build D:/development_code_2023-03-03/vscode/opencv_micro/build/yolo/myscript.bat
    running D:/development_code_2023-03-03/vscode/opencv_micro/build/yolo/myscript.bat
    这个脚本的执行应该放在最后一个微服务项目中。否则影响其他微服务的编译
    这个脚本也是cmakelist生成的。cmakelist生成脚本，然后执行脚本
    脚本中就是执行可执行文件的命令，所以这个相当于vscode的一键编译运行
    大家后续可以研究下

    我们现在看下vscode如何使用task.json文件一键编译运行把
    task文件中定义一个任务
        这个任务有一个执行的顺序，执行的顺序按照依赖条件来决定
        label": "Build",
        "dependsOn":[
                "cmake",
                "make"
            cmake是一个子任务，make也是一个子任务
            build也是一个任务，但是build任务依赖cmake和make任务
            所以要执行build任务，必须按照顺序先执行cmake和make任务

            label标签定义任务名称
                cmake就是对应的cmake命令这个名字可以随意
                "command":"cmake"这个是实际在命令行执行的命令，后面可以参数
                这个命令的意思是去上一级目录下找cmakelist文件执行cmake

                cmake执行完了执行make。这个实际指令可以是任何命令
                如果你的编译器是mingw。那么command就是mingw32-make.exe
                如果是msvc，那么就是
                C:\\Program Files (x86)\\Microsoft Visual Studio\\2022\\BuildTools\\MSBuild\\Current\\Bin\\MSBuild.exe
                这个是绝对路径，如果你将该目录添加为环境变量了，直接写msbuild即可
                args":[
				"ALL_BUILD.vcxproj",
                "/p:Configuration=Release",

                ]
                后面这连个是编译参数。其实就相当于我们执行的msbuild


                这个运行完以后就会生成可执行文件，
                "cwd":"${workspaceFolder}/build"这个相当于cd build
                我们执行msbuild之前要cd dao build目录下

                然后task任务的发起者是launch，你可以将其理解为我现在要执行task任务了
                "preLaunchTask": "Build",
                然后这个指令制定了launch文件对应的task任务。它的任务是执行build

                然后build的执行依赖cmake和make。所以这些依赖之间的联系就组成了
                编译这个过程
                即
                    cd build
                    cmake ..
                    msbuild ......

                然后还差一步执行，执行是launch中定义的
                "program": "${workspaceFolder}/build/Release/OPENCV_TEST.exe"
                这个就是执行release目录下的可执行文件。


            我一会把这个文件传到github上，大家可以了解下。其实命令行编译足够了

            然后我们的yolov5到这就结束了。主要讲解了一些模型的训练和部署上，其中涉及到一些c++的只是
            编译器的知识，还有如何用编译器安装源码的问题。python因为比较简单，涉及到问题较少。
            pip 一切


            然后后续yolov5的其他相关内容就是理论层面+模型的更改了。其实代码层面的东西不多了
            主要的代码内容还是如何去构建模型。这个还是一个重点。
            然后yolov5包含了一些检测步骤中的代码，比如nms，iou，precision, recall and map
            这些指标的计算。
            模型这块的构建主要是使用pytroch去构建，后续我们可以在这方面再讨论如何使用pytorch构建模型
            当然我们自己构建的方式肯定没有官方的正规，因为官方的构建方式是最高效的。我上次试了下，官方使用pytorch构建的
            模型比我使用c++构建的模型速度要快很多。当然这里面不是比模型的预测速度，预测速度肯定c++更快。因为他是预编译的
            因为一个项目不只有预测，我们想要怎么把结果很好的给到客户，这就需要我们在预测的基础上去构建一些增加客户体验的代码
            比如检测文件夹中的所有图像，你的编写代码方式肯定没有官方的高效。所以学习官方源码是最高效的，当然我们不自己去构建
            总过学不到直接的经验，我把我之前构建的c++代码传到github上，大家可以自己构建下，代码的逻辑很清晰，但是运行效率还是很差的
            这个就是代码编写的差距了。。。。

            然后理论这块其实是最重要的，因为如何去实现这些东西，比如如何去复现一篇论文，其实计算机专业的，软件开发的完全可以
            我们的任务主要还是要花功夫在如何提升模型的性能上的。

            后续模型这块的理论我希望和大家一起学习，一起进步
            然后我还想和大家探讨一下关于数字图像处理这本书。这本书最适合理论结合实际了。看完一个算法理论，马上使用
            代码区构建实现。最有利于学习和将理论用在实际开发中
            我的github仓库中有对这本书代码的实现，后续咱们一起探讨。作者是冈萨雷斯

            然后就是大家观看的时候如果使用二倍速，看完了要适当的放松，身体不能一直高度紧张，不要沉迷于学习哈哈
            今天日本排核废水了，大家对计算机的爱好要一辈子坚持，身体也很重要，祝大家身体健康，工作顺利。。。。

            未完待续。。。。












































































































































































































    


































































































































                























































































































































































        




















































