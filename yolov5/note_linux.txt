现在开始上云

上云步骤和windows一样，因为之前已经演示一遍了
我们在在这里操作一遍，具体细节这里就不赘述了
直接开始

使用autodl开一台GPU机器

调最便宜的

注意选择一台python3.8以上的
省的我们进去了再给python升级
因为yolov5的一些依赖库需要3.8以上的版本

然后就是将源代码和对应的权重文件上传到云服务器上。
我们试下直接下载，从仓库直接拉取试试，服务器
上的宽带不一定够

速度有点慢，我之前下载了一份在桌面上，我们直接从本地机器上传吧
压缩下上传速度更快，最好不要直接使用文件夹去操作

上传有点慢我们先来看看有什么注意事项
现在晚上，网路有点卡

我暂停一下咱们稍后再来
好了马上下载完毕，我们开始


GPU选择最便宜的即可。注意在操作一些环境配置之类的准备工作
的时候可以使用无卡模式开机，这样可以省点钱。
检测数据需要用到的参数就是weights和source
前者是权重文件，后者是检测文件的地址

所以不需要更改任何配置文件
首先需要下载第三方库
pip install -r requirements.txt
之前在windows上面配置，因为我的电脑上有第三方库所以没有报错

不知道下载多久，但是应该很快吧。
有国内镜像云



linux测试官方权重文件
    想使用ssh协议连接下云端。这样方便使用vscode操作云端项目
    VScode好用吧。好用的还在后面呢，vscode结合mingw、msvc更好用了。
    秒杀一切集成开发环境
    好了下载好了。直接开测

训练自己的数据
    我直接开始操作了
        第一步上传自己的数据集
        先把脚本下载下来吧，要不不知道怎么构建数据集的文件夹
        首先是数据增强
        传输数据有点慢，大家见谅。
        OK继续，确保原图像和对应的标签文件一一对应上。
        可以把这个脚本中的依赖库放到requirements文件中
        可以发现云上的机器cpu竟然比我本机的好一点，内存也大一点
        这效率就是高。
    下一步，标签去重。
        可以发现还是有重复标签的
    下一步是xml to txt
    下一步就是配置文件的修改，然后就是训练
        修改data/VOC.yaml
        修改model/yolov5.yaml
            计算自己训练集的anchors
            竟然不会写python的入口函数。
            总感觉这块不能这样直接复制，但是又不知道该怎么复制
            交给大家
    下来可以直接开练
        直接使用默认的batch-size=16，epochs=100
        yolov5中对cpu和GPU做了兼容，所以不用考虑再不同的机器上的问题
        没有GPU直接默认使用CPU，有GPU的默认使用GPU，如果想要使用CPU
        ，显式的指定参数即可。
        Arial.ttf这个是检测框上面的置信度和类别名称的字体
        好了，GPU的训练就到这里了，我先暂停一会，然后使用训练好的
        权重检测下。

    这里需要注意一个问题。
        我们对yolov5的使用其实是基于yolov5预训练的权重模型来
        训练我们自己的数据，当然，我们使用它训练好自己的数据以后
        它是专属于我们自己的数据集的，之前的数据集权重肯定被抛弃了
        只不过基于预训练的模型训练的话，如果你的样本和预训练模型的训练
        样本差不多或者有相似之处的，可以提高训练的效率。

        我们可以发现是加载数据的时候出错了。
        第一个错误下载字体出错了
        第二个错误是加载数据出错，我们检查一下数据路径是否正确

        这个VOC路径应该是站在train.py文件的相对路径
        注意yolov5的数据增强包含mosaic，我们可以在这个文件中
        修改mosaic的值为0，即为取消mosaic
        这里还可以更改一些训练参数和检测参数

        暂停一下我检查一下哪里错误的
        应该是下载字体错误的问题，我看这次下载成功了
        好像本地机器没有遇到这个问题，是不是我之前已经下载过的原因
        大家第一次去训练的时候一定要注意这个问题
        云服务器的宽带效率也很差
        Failed to connect to github.com port 443: Connection timed out
        这个字体是从yolov5的官方仓库中去拉取的

        下载完了，大家部署的时候如果下载不下来可以手动下载
        再去更改general文件中关于字体的路径即可。源代码
        给的是一个下载链接，所以这块自动下载了

        完了又报错了，可以发现是yaml配置文件的问题，应该是格式的问题
        我觉得刚才好事是anchors标签头被注解掉的问题
        OK，待会训练完了检测下即可。
        GPU的速度还是很快的啊，虽然样本也不多。

        训练完毕
        这个精度和召回率有点低，不过也就这样了，可以多拿些样本
        训练批次再增加点
        我们进下面板
        训练好的权重在这里
        因为面板服务是在服务器上开启的，我们使用本地机器无法访问
        我们可以将服务器上的tensorboard开启的web端口映射到本地机器上
        然后我们就可以使用本地机器访问了。
        个人用户可通过SSH隧道的方式代理服务到本地
        官话SSH隧道
        注意映射到谁的机器上使用谁的机器去做映射
        region-42.seetacloud.com    host
        36473端口，将这个端口映射到本地机器
        可以映射到本地6006默认的端口

        将root@region-42.seetacloud.com -p 36473端口，将这个端口映射到本地机器的
        127.0.0.1:6006   前面是ip地址，后面是端口
        完事了什么不回复就证明映射成功，直接访问即可

        拒绝。....

        是不是端口关闭了,我们尝试在服务器上访问一下
        完了我们没有开启tensorboard
        我们还需要手动开启,注意我们之前的视频中提到yolov5会自动开启
        这个是错误的.现在正式开启了6006端口
        我们可以做映射了

        metrics是混淆矩阵之类的
        mAp就是PR曲线的面积
        mAP_0.5, 是iou阈值,这个阈值忘记了.取0.5时候对应的mAP值
        mAP_0.5:0.95,这个就是阈值取0.5到0.95之间一系列值,然后取
        平均值,具体取值步伐应该是0.5?

        precision: 
            TP/(TP+FP)
            TP:预测正样本为正的数量
            FP:预测正样本为负的数量
            预测为正样本并正确的数/所有预测
            有点乱了，我思考下。
            自己描述的不精辟把自己搞乱了

            TP: 正样本，预测正确了
            FP: 正样本，预测错误了
            精度就是预测正样本正确的数占比总的正样本数之比
        
        recall:
            TP/(TP+FN)
            FN: 负样本，预测错误了，也就是把负样本预测为正样本了
            TP: 正样本，预测正确了，也就是把正样本预测为正样本了
            召回率就是预测正样本正确的数占比预测为正样本的总数
            也就是所有预测为正样本的数中预测正确的概率，这大概就是召回率
            的意思
            又有点乱，我思考下

            这个后续可以使用代码编写下怎么计算这些指标

        下来这个是训练时候的损失，主要包含三个
            第一个是预测框的损失
            第二个是精度损失
            第三个分类损失
            也就是yolo单阶段检测算法的核心，因为为了实现
            端到端的检测，直接一步到位给出物体在图像中的类别和位置
            和置信度，我们必须设置对应的损失函数，让算法不断地趋近
            这个结果。所以损失函数对于深度学习尤为重要。就像是人类
            给计算机设定了一个欲望的方向，计算机朝着这个方向不断靠近。
            可以想象如果计算机以后会自己学习给自己制造各种欲望，也就是
            损失函数都不用我们人类去定义了，他们自己可以定义自己的损失函数
            也就是欲望，那是多么的可怕。

        下来是验证集的损失


        最后我们使用训练的模型检测下，具体步骤和之前的官方权重
        文件的检测模式一样，更改下权重和训练数据配置文件即可。

        检测的时候主要使用VOC文件中的classnames
        --line-thickness 1 设置线段尺寸是1
        效果不是特别好，小数据集适合使用更大尺寸的检测头
        而传统的yolov5只有三个检测头，而且尺寸很小，更小的检测头只能
        适合检测较大的物体，因为更小的检测头具有更大的感受野。

        还可以，因为传统的yolov5不适合小物体检测，所以达到这个效果已经
        很可以了。


        下面我们可以有两个思路去跟进

        首先使用更适合小物体检测的模型，即更改yolov5模型
        还有就是实现和硬件的更好兼容，将模型使用c++部署

        本期yolov5 python已完结
        yolov5 cpp
        下期更精彩，未完待续
        感谢各位。。。
























